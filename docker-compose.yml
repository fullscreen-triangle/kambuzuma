version: '3.8'

services:
  # Main Benguela orchestrator
  benguela-core:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: benguela-core
    restart: unless-stopped
    networks:
      - benguela-network
    ports:
      - "8080:8080"  # Main API
      - "8081:8081"  # Quantum interface
      - "8082:8082"  # Hardware interface
    volumes:
      - ./config:/opt/benguela/config:ro
      - ./data:/opt/benguela/data
      - ./logs:/opt/benguela/logs
      - ./quantum_states:/opt/benguela/quantum_states
      - /dev:/dev  # Hardware access
    privileged: true  # Required for hardware access
    environment:
      - BENGUELA_MODE=production
      - BENGUELA_LOG_LEVEL=info
      - POSTGRES_URL=postgresql://benguela:benguela_pass@postgres:5432/benguela
      - REDIS_URL=redis://redis:6379
      - PROMETHEUS_URL=http://prometheus:9090
    depends_on:
      - postgres
      - redis
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL database for experiment data and configurations
  postgres:
    image: postgres:15-alpine
    container_name: benguela-postgres
    restart: unless-stopped
    networks:
      - benguela-network
    environment:
      - POSTGRES_DB=benguela
      - POSTGRES_USER=benguela
      - POSTGRES_PASSWORD=benguela_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U benguela"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and real-time data
  redis:
    image: redis:7-alpine
    container_name: benguela-redis
    restart: unless-stopped
    networks:
      - benguela-network
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: benguela-prometheus
    restart: unless-stopped
    networks:
      - benguela-network
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: benguela-grafana
    restart: unless-stopped
    networks:
      - benguela-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=benguela_admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

  # InfluxDB for time-series quantum measurements
  influxdb:
    image: influxdb:2.7-alpine
    container_name: benguela-influxdb
    restart: unless-stopped
    networks:
      - benguela-network
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=benguela
      - DOCKER_INFLUXDB_INIT_PASSWORD=benguela_influx_pass
      - DOCKER_INFLUXDB_INIT_ORG=benguela-org
      - DOCKER_INFLUXDB_INIT_BUCKET=quantum-measurements
    volumes:
      - influxdb_data:/var/lib/influxdb2
    ports:
      - "8086:8086"

  # Jupyter Lab for scientific analysis
  jupyter:
    build:
      context: .
      dockerfile: docker/Dockerfile.jupyter
    container_name: benguela-jupyter
    restart: unless-stopped
    networks:
      - benguela-network
    environment:
      - JUPYTER_TOKEN=benguela_jupyter_token
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data:/home/jovyan/data:ro
      - ./src/python:/home/jovyan/benguela_py:ro
    ports:
      - "8888:8888"
    depends_on:
      - benguela-core

  # Hardware calibration service
  calibration:
    build:
      context: .
      dockerfile: docker/Dockerfile.calibration
    container_name: benguela-calibration
    restart: unless-stopped
    networks:
      - benguela-network
    volumes:
      - ./calibration:/opt/calibration
      - /dev:/dev
    privileged: true
    environment:
      - CALIBRATION_INTERVAL=3600  # 1 hour
    depends_on:
      - benguela-core

  # Safety monitoring service
  safety-monitor:
    build:
      context: .
      dockerfile: docker/Dockerfile.safety
    container_name: benguela-safety
    restart: unless-stopped
    networks:
      - benguela-network
    environment:
      - SAFETY_CHECK_INTERVAL=10  # 10 seconds
      - EMERGENCY_SHUTDOWN_ENABLED=true
    volumes:
      - ./safety:/opt/safety:ro
    depends_on:
      - benguela-core
      - influxdb

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: benguela-backup
    restart: unless-stopped
    networks:
      - benguela-network
    environment:
      - PGPASSWORD=benguela_pass
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: |
      sh -c 'while true; do
        echo "Starting backup at $$(date)"
        pg_dump -h postgres -U benguela benguela > /backups/benguela_$$(date +%Y%m%d_%H%M%S).sql
        find /backups -name "*.sql" -mtime +7 -delete
        sleep 21600  # 6 hours
      done'
    depends_on:
      - postgres

networks:
  benguela-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  influxdb_data:
    driver: local 