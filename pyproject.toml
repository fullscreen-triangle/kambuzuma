[build-system]
requires = ["setuptools>=61.0", "wheel", "numpy>=1.20.0"]
build-backend = "setuptools.build_meta"

[project]
name = "benguela-py"
version = "0.1.0"
description = "Biological Quantum Computing - Python Scientific Computing Components"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Benguela Team", email = "benguela@quantum-bio.org"}
]
maintainers = [
    {name = "Benguela Team", email = "benguela@quantum-bio.org"}
]
keywords = ["quantum", "biology", "neuroscience", "scientific-computing"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
]
requires-python = ">=3.9"
dependencies = [
    # Core scientific computing
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "pandas>=2.0.0",
    "polars>=0.20.0",
    
    # Quantum computing
    "qiskit>=0.45.0",
    "cirq>=1.2.0",
    "pennylane>=0.33.0",
    
    # Bioinformatics and molecular dynamics
    "biopython>=1.81",
    "mdanalysis>=2.5.0",
    "openmm>=8.0.0",
    "pymol-open-source>=2.5.0",
    
    # Electrophysiology and patch-clamp analysis
    "neo>=0.12.0",
    "elephant>=0.14.0",
    "quantities>=0.13.0",
    
    # Machine learning and optimization
    "scikit-learn>=1.3.0",
    "torch>=2.1.0",
    "jax>=0.4.0",
    "optax>=0.1.7",
    
    # Visualization
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.17.0",
    "bokeh>=3.3.0",
    
    # Async and concurrent processing
    "asyncio-mqtt>=0.13.0",
    "aiofiles>=23.2.1",
    "uvloop>=0.19.0",
    
    # Configuration and serialization
    "pydantic>=2.5.0",
    "pyyaml>=6.0.1",
    "toml>=0.10.2",
    "msgpack>=1.0.7",
    
    # Hardware interfaces
    "pyserial>=3.5",
    "pyusb>=1.2.1",
    "nidaqmx>=0.6.5",
    
    # Database and caching
    "sqlalchemy>=2.0.0",
    "redis>=5.0.1",
    "pymongo>=4.6.0",
    
    # Monitoring and logging
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    "opencensus>=0.11.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
]
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "nbsphinx>=0.9.1",
    "jupyter>=1.0.0",
]
hardware = [
    "nidaqmx>=0.6.5",
    "pyvisa>=1.13.0",
    "pyserial>=3.5",
    "phidget22>=1.12.0",
]
simulation = [
    "brian2>=2.5.0",
    "nest-simulator>=3.5.0",
    "neuron>=8.2.0",
]

[project.urls]
Homepage = "https://github.com/benguela/benguela"
Repository = "https://github.com/benguela/benguela.git"
Documentation = "https://benguela.readthedocs.io"
"Bug Tracker" = "https://github.com/benguela/benguela/issues"

[project.scripts]
benguela-py = "benguela_py.cli:main"
benguela-analyze = "benguela_py.analysis:main"
benguela-monitor = "benguela_py.monitoring:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
benguela_py = ["config/*.toml", "protocols/*.json", "schemas/*.json"]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["benguela_py"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "hardware: marks tests that require hardware",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
] 